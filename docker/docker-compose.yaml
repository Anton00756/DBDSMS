version: "3.9"

services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - node-network

  kafka:
    image: docker.io/bitnami/kafka:3.3.1-debian-11-r38
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_LISTENERS=EXTERNAL_SAME_HOST://:29092,INTERNAL://:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
    depends_on:
      - zookeeper
    networks:
      - node-network

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    container_name: init_kafka
    depends_on:
      - kafka
    networks:
      - node-network
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics --bootstrap-server kafka:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic raw_data --replication-factor 3 --partitions 10
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic processed_data --replication-factor 3 --partitions 10
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  greenplum:
    image: ionxwood/greenplum:latest
    container_name: greenplum
    restart: unless-stopped
    ports:
      - "5432:5432"
    networks:
      - node-network
    volumes:
      - greenplum_data:/srv
    environment:
      MALLOC_ARENA_MAX: 1
      TZ: Europe/Moscow
    env_file:
      - ${PWD}/.env

  taskmanager:
    image: tosha/pyflink_image:latest
    depends_on:
      - pyflink
    command: taskmanager
    networks:
      - node-network
    env_file:
      - ${PWD}/services/pyflink/.env
      - ${PWD}/.env
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: pyflink
        taskmanager.numberOfTaskSlots: 2   

  pyflink:
    image: tosha/pyflink_image:latest
    container_name: pyflink
    networks:
      - node-network
    depends_on:
      - init-kafka
      - data_generator
      - greenplum
    env_file:
      - ${PWD}/services/pyflink/.env
      - ${PWD}/.env
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: pyflink
  #    entrypoint: [ 'sleep', '10000s' ]

  data_generator:
    image: tosha/data_generator_image:latest
    container_name: data_generator
    networks:
      - node-network
    depends_on:
      - init-kafka
    env_file:
      - ${PWD}/services/data_generator/.env
      - ${PWD}/.env

  result_viewer:
    image: tosha/result_viewer_image:latest
    container_name: result_viewer
    networks:
      - node-network
    depends_on:
      - init-kafka
      - pyflink
    env_file:
      - ${PWD}/services/result_viewer/.env
      - ${PWD}/.env

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  greenplum_data:
    driver: local

networks:
  node-network:
    driver: bridge